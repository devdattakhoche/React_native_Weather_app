{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\React_Native\\\\wheatherapp\\\\components\\\\Cityseacrh.js\";\nimport React, { Component } from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Provider as PaperProvider, TextInput, List, Card } from \"react-native-paper\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nvar instructions = Platform.select({\n  ios: \"Press Cmd+R to reload,\\n\" + \"Cmd+D or shake for dev menu\",\n  android: \"Double tap R on your keyboard to reload,\\n\" + \"Shake or press menu button for dev menu\"\n});\n\nvar Citysearch = function (_Component) {\n  _inherits(Citysearch, _Component);\n\n  function Citysearch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Citysearch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Citysearch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      text: \"\",\n      cities: []\n    };\n\n    _this.fetchcity = function _callee(text) {\n      var citylist;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              text = text.trim();\n              citylist = null;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(axios.get(\"http://autocomplete.wunderground.com/aq?query=\" + text).then(function (response) {\n                citylist = response.data.RESULTS.map(function (iterator) {\n                  return iterator;\n                });\n              }).catch(function (error) {\n                console.log(error);\n              }));\n\n            case 4:\n              _this.setState({\n                text: text,\n                cities: citylist\n              });\n\n              console.log(_this.state.cities);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(Citysearch, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var City_dropdown = null;\n\n      if (this.state.text.length > 0 && this.state.cities.length > 0) {\n        City_dropdown = this.state.cities.map(function (city) {\n          return React.createElement(Card, {\n            key: city.zmw,\n            style: {\n              margin: 5,\n              marginRight: 20,\n              marginLeft: 20\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 9\n            }\n          }, React.createElement(List.Item, {\n            title: city.name,\n            left: function left() {\n              return React.createElement(List.Icon, {\n                icon: \"label\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 24\n                }\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 9\n            }\n          }));\n        });\n      } else if (this.state.text.length > 0 && this.state.cities.length === 0) {\n        City_dropdown = React.createElement(Card, {\n          style: {\n            margin: 40\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 7\n          }\n        }, React.createElement(List.Item, {\n          title: \"Oops !! No Cities found!!\",\n          left: function left() {\n            return React.createElement(List.Icon, {\n              icon: \"label\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 24\n              }\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, React.createElement(Header, {\n        title: \"Select City\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }), React.createElement(TextInput, {\n        style: {\n          margin: 30,\n          border: 5\n        },\n        label: \"Choose a City\",\n        selectionColor: \"lightgreen\",\n        mode: \"outlined\",\n        onChangeText: function onChangeText(text) {\n          return _this2.fetchcity(text);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }), React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, City_dropdown)));\n    }\n  }]);\n\n  return Citysearch;\n}(Component);\n\nexport { Citysearch as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["D:/React_Native/wheatherapp/components/Cityseacrh.js"],"names":["React","Component","Provider","PaperProvider","TextInput","List","Card","axios","Header","instructions","Platform","select","ios","android","Citysearch","state","text","cities","fetchcity","trim","citylist","get","then","response","data","RESULTS","map","iterator","catch","error","console","log","setState","City_dropdown","length","city","zmw","margin","marginRight","marginLeft","name","styles","container","border","flex","StyleSheet","create"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport { Platform, StyleSheet,ScrollView, Text, View } from \"react-native\";\r\nimport {\r\n  Provider as PaperProvider,\r\n  TextInput,\r\n  List,\r\n  Card\r\n} from \"react-native-paper\";\r\n// import Header from \"./components/Header\";\r\nimport axios from \"axios\";\r\nimport Header from './Header';\r\n\r\n\r\nconst instructions = Platform.select({\r\n  ios: \"Press Cmd+R to reload,\\n\" + \"Cmd+D or shake for dev menu\",\r\n  android:\r\n    \"Double tap R on your keyboard to reload,\\n\" +\r\n    \"Shake or press menu button for dev menu\"\r\n});\r\n\r\n\r\nexport default class Citysearch extends Component {\r\n  state = {\r\n    text: \"\",\r\n    cities: []\r\n  };\r\n  fetchcity = async text => {\r\n    // console.log(text);\r\n    text = text.trim();\r\n    var citylist = null;\r\n    await axios\r\n      .get(`http://autocomplete.wunderground.com/aq?query=${text}`)\r\n      .then(function(response) {\r\n        // console.log(response.data.RESULTS.slice(0,10))\r\n        citylist = response.data.RESULTS.map(iterator => {\r\n          return iterator;\r\n        });\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n    this.setState({\r\n      text: text,\r\n      cities: citylist\r\n    });\r\n    console.log(this.state.cities);\r\n  };\r\n  render() {\r\n    var City_dropdown = null;\r\n    if((this.state.text).length > 0 && (this.state.cities).length > 0)\r\n    {\r\n    City_dropdown = this.state.cities.map(city => {\r\n      return(\r\n        <Card key = {city.zmw} style = {{margin:5,marginRight:20,marginLeft:20}}>\r\n        <List.Item \r\n        \r\n        title={city.name}\r\n        left = { () => <List.Icon  icon=\"label\" />}\r\n        />\r\n      </Card>\r\n      ) \r\n      \r\n    })\r\n    \r\n  }\r\n  else if((this.state.text).length > 0 && (this.state.cities).length === 0 )\r\n  {\r\n    City_dropdown = (\r\n      <Card style = {{margin:40}}>\r\n        <List.Item \r\n        title=\"Oops !! No Cities found!!\"\r\n        left = { () => <List.Icon  icon=\"label\" />}\r\n        />\r\n      </Card>\r\n    )\r\n  }\r\n  \r\n    return (\r\n     \r\n        <View style = {styles.container}>\r\n          <Header title = \"Select City\"/>\r\n          <TextInput\r\n            style={{ margin: 30 , border : 5 }}\r\n            label=\"Choose a City\"\r\n            selectionColor = 'lightgreen'\r\n            mode=\"outlined\"\r\n            onChangeText={text => this.fetchcity(text)}\r\n          />\r\n          \r\n          <View style  ={{flex:1}}>\r\n          <ScrollView >\r\n          {City_dropdown}\r\n          </ScrollView>\r\n          </View>\r\n        </View>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    // backgroundColor: '#f3f3f3',\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}